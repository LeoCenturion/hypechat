---
swagger: "2.0"
info:
  description: API para la app Hypechat de la materia 75.52 Taller de Programacion 2 de la FIUBA
  version: 1.0.0
  title: Hypechat API
host: https://secure-plateau-18239.herokuapp.com/
schemes:
- https
paths:
  /login:
    post:
      summary: Valida al usuario que quiere ingresar a la app
      parameters:
      - in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/loginCredentials'
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            $ref: '#/definitions/user'
        404:
          description: Bad login information
          schema:
            $ref: '$/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'

  /signUp:
    post:
      summary: Receives user information through the body and registers it as a new user if it doesn't already exists.
      parameters:
      - in: body
        name: userSignUpData
        required: true
        schema:
          $ref: '#/definitions/signUpCredentials'
      responses:
        200:
          description: Succesful request
          schema:
            $ref: '#/definitions/user'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /loginFacebook:
    post:
      summary: sends user's facebook token for login.
      parameters:
      - in: body
        name: facebookToken
        required: true
        schema:
          $ref: '#/definitions/facebookLoginCredentials'
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            $ref: '#/definitions/user'
        400:
          description: Bad login information
          schema:
            $ref: '$/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /profile/{userEmail}:
    get:
      summary: Se muestran los datos (sin pws y token) del usuario al cual le corresponde el email del path (poner el mail sin las llaves en los costados).
      parameters:
      - name: email
        in: path
        description: email del usuario del cual se quiere ver el perfil
        required: true
        type: string
      responses:
        200:
          description: Request Exitoso!
          schema:
            $ref: '#/definitions/userProfile'
        400:
          description: email del path no existe.
          schema:
            $ref: '#/definitions/Error' 
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 

  /profile:
    put:
      summary: updates information fields (with exception of the token), of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: userProfile
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user profile successfully updated
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error'

  /password:
    put:
      summary: updates password of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: user
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user password successfully updated
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 

  /organizations/{userEmail}:
    get:
      summary: Se muestran todas las organizaciones(sin pws y token) del usuario al cual le corresponde el email del path (poner el mail sin las llaves en los costados).
      parameters:
      - name: email
        in: path
        description: email del usuario del cual se quiere ver todas las organizaciones
        required: true
        type: string
      responses:
        200:
          description: Request Exitoso!
          schema:
            type: object
            properties:
              organizaciones:
                type: array
                items:
                  type: string
                example: [{"id":"taller2018","name":"Taller 1 2018"},{"id":"taller2019","name":"Taller 2 2019"},{"id":"grupo-cerrado-43","name":"Grupo los pibes"}]
                description: lista con los id nombre de las organizaciones que tiene el usuario o esta agregado
        400:
          description: email del path no existe.
          schema:
            $ref: '#/definitions/Error' 
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 
                
  /privateMsj:
    get:
      description: Trae todas los mensajes privados de la organizacion del usuario
      parameters:
        - in: body
          name: datos
          schema:
            type: object
            required: 
              - token
              - organization_id
              - email
            properties:
              token:
                type: string
                description: el token del usuario
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              organizacion_id:
                type: string
                description: el id de la organizacion
                example: "taller2_2019"
              email:
                type: string
                description: el email del usuario
                example: "test@1.com"
                
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:
              canales:
                type: array
                items:
                  type: string
                example: [{"name":"general"},{"name":"varios"},{"name":"tp1"}]
                description: lista con los nombres de los canales que tiene el usuario en esa organizacion
              msjPrivados:
                type: array
                items:
                  type: string
                example: [{"name":"CapitalMarvel"},{"name":"Iroman"},{"name":"Thor"}]
                description: lista con los nombre de contactos con los que tiene msj privados en la organizacion 
        400:
          description: email no existe.
          schema:
            $ref: '#/definitions/Error' 
        401:
          description: la orgainzacion id no existe.
          schema:
            $ref: '#/definitions/Error'    
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 
                
  /idOrganizationValid/{organizationID}:
    get:
      description: Responde si existe o no una organizacion con ese ID
      parameters:
        - name: id
          in: path
          description: organizacion id del usuario del cual se quiere ver si es valida
          required: true
          type: string
                
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe una organizacion con ese ID, por lo tanto es valido!
  
   
        400:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Ya existe una organizacion con ese ID!

  /organization:
    post:
      description: Crea una nueva organizacion
      parameters: 
        - in: body
          name: datos
          schema:
            type: object
            required: 
              - token
              - name
              - id
              - email
              - psw
            properties:
              token:
                type: string
                description: el token del usuario
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              nombre:
                type: string
                description: nombre de la organizacion
                example: "Organizacion de datos"
              id:
                type: string
                description: id de la organizacion
                example: "orga-2019"
              email_usuario:
                type: string
                description: email del usuario que creo la organizacion
                example: "test@1.com"
              contraseña:
                type: string
                description: contraseña de la organizacion
                example: "orga12345"

      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Se creo la organizacion!
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Hubo un error con el servidor! 
                
  /userOrganization:
    post:
      description: Agregar un usuario a la organizacion
      parameters: 
        - in: body
          name: datos
          schema:
            type: object
            required: 
              - token
              - idOrganization
              - email
              - pswOrganization
            properties:
              token:
                type: string
                description: el token del usuario
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              idOrganizacion:
                type: string
                description: id de la organizacion
                example: "orga-2019"
              email:
                type: string
                description: email del usuario que creo la organizacion
                example: "test@1.com"
              pswOrganization:
                type: string
                description: contraseña de la organizacion
                example: "it is the password"
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Se ha agregado el usuario a la organizacion!
        400:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Ya existe el usuario en la organizacion!  
        401:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe un usuario con ese email!
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe una organizacion con ese id!

  /organization/{token}/{organizationID}:
    get:
      description: Trae la informacion de la organizacion
      parameters:
        - name: token
          in: path
          description: el token del usuario
          required: true
          type: string
        - name: id_organizacion
          in: path
          description: id de la organizacion
          required: true
          type: string
                
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:
                nombre:
                  type: string
                  example: "Taller 2 2019"
                  description: nombre de la organizacion consultada
                id:
                  type: string
                  example: "taller2-19"
                  description: id de la organizacion consultada
                owner_email:
                  type: string
                  example: "test@1.com"
                  description: email del usuario que creo la organizacion consultada
                password:
                  type: string
                  example: "12345678"
                  description: psw de la organizacion consultada
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe una organizacion con ese id!
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Hubo un error con el servidor!
                
  /nameOrganization:
    put:
      description: Setea un nuevo nombre a la organizacion
      parameters: 
        - name: datos
          in: body
          schema:
            type: object
            required: 
              - token
              - organizationID
              - name
            properties:
              token:
                type: string
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
                description: el token del usuario
              id_organizacion:
                type: string
                example: "orga-2019"
                description: id de la organizacion
              nombre_organizacion:
                type: string
                example: "Taller 2 fiuba"
                description: nuevo nombre de la organizacion

      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Se ha cambiado el nombre a la organizacion!
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe la organizacion!  
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Hubo un error con el servidor!

  /pswOrganization:
    put:
      description: Setea un nuevo password a la organizacion
      parameters: 
        - name: datos
          in: body
          schema:
            type: object
            required: 
              - token
              - organizationID
              - psw
            properties:
              token:
                type: string
                description: el token del usuario
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              id_organizacion:
                type: string
                description: id de la organizacion
                example: "orga-2019"
              psw_organizacion:
                type: string
                description: nuevo password de la organizacion
                example: "fiuba2taller"

      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Se ha cambiado el password a la organizacion!
        400:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: No existe la organizacion!
  
  /recoveredPassword:
    get:
      summary: returns a token with which the password can be recovered
      parameters:
      - in: body
        name: userEmail
        required: true
        schema:
          type: object
          required: 
            - email
          properties:
              email:
                type: string
                description: user's email
                example: "user@gmail.com"
        responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
            description: token to recover the password
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: user dose not exist
          schema:
            $ref: '#/definitions/Error'

    put:
      summary: updates user's password with the recovered token
      parameters:
      - in: body
        name: userData
        required: true
        schema:
          type: object
          required: 
            - email
            - recoverPasswordToken
            - newPassword
          properties:
              email:
                type: string
                description: user's email
                example: "user@gmail.com"
              recoverPasswordToken:
                type: string
                description: token to recover the password
                example: "fhsdjkfnsdjsS87s"
              newPassword:
                type: string
                description: new user's password
                example: "This is my new password"
        responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
            description: token to recover the password
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: user dose not exist
          schema:
            $ref: '#/definitions/Error'

  /organization/senderMenssage:
    get:
      summary: returns message without restrected organization words
      parameters:
        - in: body
          name: message
          required: true
          schema:
            type: object
            required: 
              - message
              - organizationID
              - userToken
            properties:
                message:
                  type: string
                  description: message that user sends 
                  example: "hello Carlos!"
          responses:
            200:
            description: Successful request
            name: messageOK
            schema:
              type: object
              description: message without restrected words
            500:
              description: Server faild
              schema:
                $ref: '#/definitions/Error'
            404:
              description: user or organization dose not exist
              schema:
                $ref: '#/definitions/Error'

  organization/restrictedWords/{id}/{token}:
    get:
      summary: returns organization's restricted words
      parameters:
        - in: path
          name: OrdanizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            type: object
            required: 
              - id
              - token
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
              description: organization dose not exist
              schema:
                $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: add a new restricted word to the organization
      parameters:
        - in: body
          name: restrictedWords
          required: true
          schema:
            type: object
            required:
              - restrictedWords
            properties:
                restrictedWords:
                  type: string
                  description: new restricted word
        - in: path
          name: organizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            type: object
            required: 
              - id
              - token
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user or organization dose not exist
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user is not authorized
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete an organization's restricted word
      parameters:
        - in: body
          name: restrictedWord
          required: true
          schema:
            type: object
            required:
              - restrictedWords
            properties:
                restrictedWords:
                  type: string
                  description: restricted word to delete
        - in: path
          name: organizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            properties:
              id:
                type: string
              token:
                type: string
            required: 
              - id
              - token
            type: object
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user or organization dose not exist
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user is not authorized
          schema:
            $ref: '#/definitions/Error'

  /answerQuestions/{userEmail}/{asw1}/{asw2}:
    get:
      summary: returns recover password token if "asw1" and "asw2" are correct
      parameters:
        - in: path
          name: asw1, asw2, userEmail
          description: answers for secret questions of userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid user email
              schema:
                $ref: '#/definitions/Error'
        401:
          description: incorrect answers
          schema:
            $ref: '#/definitions/Error'

  /secretQuestions/{userEmail}:
    get:
      summary: returns userEmail's secret questions
      parameters:
        - in: path
          name: userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: question1, question2
          schema:
            type: object
            properties:
              question1:
                type: string
              question2:
                type: string
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid user email
              schema:
                $ref: '#/definitions/Error'

  /answersQuestions/{token}:
    get:
      summary: returns answers of secret questions
      parameters:
        - in: path
          name: token
          required: true
          description: token of user
      responses:
        200:
          description: Successful request
          name: answers
          schema:
            type: object
            properties:
              answers:
                type: object
                properties:
                  answer1:
                    type: string
                  answer2:
                    type: string
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /secretQuestios:
    put:
      summary: returns answers of secret questions
      parameters:
        - in: body
          name: token, question1, question2, answer1, answer2
          required: true
          description: token of user
          schema:
            type: object
            properties:
              token:
                type: string
              question1:
                type: string
              question2:
                type: string
              answer1:
                type: string
              answer2:
                type: string
            required:
              - token
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /location/{token}/{email}:
    get:
      summary: returns to token's user longitude and latitude of email's user
      parameters:
        - in: path
          name: token, email
          required: true
          description: token of user
      responses:
        200:
          description: Successful request
          name: latitud, longitud
          schema:
            type: object
            properties:
              latitud:
                type: Number
              longitud:
                type: Number
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /location:
    put:
      summary: updates user location (longitude and/or latitude)
      parameters:
        - in: body
          name: token, lotitud, longitud
          properties:
            token:
              type: string
            longitud:
              type: Number
            latitud:
              type: Number
          required: true
          description: longitude and latitude of token's user
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /registration/months/{token}:
    get:
      summary: returns the number of users who registered in the last four months
      parameters:
        - in: path
          name: token
          properties:
            token:
              type: string
          required: true
      responses:
        200:
          description: Successful request
          name: resultados
          schema:
            type: array
            items:
              type: object
              properties:
                year:
                  type: number
                month:
                  type: number
                total:
                  type: number
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /registration/year/{token}/{year}:
    get:
      summary: returns the number of users who registered on year "{year}"
      parameters:
        - in: path
          name: token, year
          properties:
            token:
              type: string
            year:
              type: number
          required: true
      responses:
        200:
          description: Successful request
          name: total
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /logout/{token}:
    get:
      summary: updates user token_notifications to ' '
      parameters:
        - in: path
          name: token, year
          properties:
            token:
              type: string
            year:
              type: number
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

definitions:
  user:
    type: object
    properties:
      token:
        type: string
        description: user login token
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url de la nueva foto del usuario
  signUpCredentials:
    type: object
    required:
    - psw
    - email
    properties:
      psw:
        type: string
        description: user password
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url de la nueva foto del usuario
  logInCredentials:
    type: object
    required:
    - email
    - psw
    properties:
      email:
        type: string
        description: user email
      psw:
        type: string
        description: user password
  facebookLogInCredentials:
    type: object
    required:
    - token
    properties:
      token:
        type: string
        example: aB12874gk12sh37901nnlid2
        description: user token asigned by facebook api
  userProfile:
    type: object
    properties:
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url de la nueva foto del usuario
  Error:
    properties:
      code:
        type: int32
        example: 500
      message:
        type: string
        example: server error

