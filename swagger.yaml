---
swagger: "2.0"
info:
  description: API para la app Hypechat de la materia 75.52 Taller de Programacion 2 de la FIUBA
  version: 1.0.0
  title: Hypechat API
host: https://secure-plateau-18239.herokuapp.com/
schemes:
- https
paths:
  /login:
    post:
      summary: Validate the user who wants to access the application.
      parameters:
      - in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/loginCredentials'
      responses:
        200:
          description: Successful request
          schema:
            $ref: '#/definitions/user'
        404:
          description: Bad login information
          schema:
            $ref: '$/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'

  /signUp:
    post:
      summary: Receives user information through the body and registers it as a new user if it doesn't already exists.
      parameters:
      - in: body
        name: userSignUpData
        required: true
        schema:
          $ref: '#/definitions/signUpCredentials'
      responses:
        200:
          description: Succesful request
          schema:
            $ref: '#/definitions/user'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /logFacebook:
    post:
      summary: sends user's facebook token for login.
      parameters:
      - in: body
        name: facebookToken
        required: true
        schema:
          $ref: '#/definitions/facebookLoginCredentials'
      responses:
        200:
          description: Successful request
          schema:
            $ref: '#/definitions/user'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /profile/{userEmail}:
    get:
      summary: returns data (without pws and token) of the user to which the route's email corresponds (put the email without the keys on the sides).
      parameters:
      - name: email
        in: path
        description: email of the user that you want to see the profile.
        required: true
        type: string
      responses:
        200:
          description: Successful Request
          schema:
            $ref: '#/definitions/userProfile'
        400:
          description: incalid user email
          schema:
            $ref: '#/definitions/Error' 
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error' 

  /profile:
    put:
      summary: updates information fields (with exception of the token), of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: userProfile
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user profile successfully updated
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'

  /password:
    put:
      summary: updates password of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: user
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user password successfully updated
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 

  /organizations/{userEmail}:
    get:
      summary: returns all the organizations (without pws and token) of the user to whom the route's email corresponds (put the email without the keys on the sides).
      parameters:
      - name: email
        in: path
        description: email of the user you want to see all organizations.
        required: true
        type: string
      responses:
        200:
          description: Successful Request
          schema:
            type: object
            properties:
              organizaciones:
                type: array
                items:
                  type: string
                example: [{"id":"taller2018","name":"Taller 1 2018"},{"id":"taller2019","name":"Taller 2 2019"},{"id":"grupo-cerrado-43","name":"Grupo los pibes"}]
                description: list with the id and the name of the organizations to which the user belongs
        400:
          description: invalid user email
          schema:
            $ref: '#/definitions/Error' 
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error' 
                
  /privateMsj:
    get:
      description: returns all user's private messages in the organization
      parameters:
        - in: body
          name: datos
          schema:
            type: object
            required: 
              - token
              - organization_id
              - email
            properties:
              token:
                type: string
                description: user token
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              organizacion_id:
                type: string
                description: organization id
                example: "taller2_2019"
              email:
                type: string
                description: user email
                example: "test@1.com"
                
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:
              canales:
                type: array
                items:
                  type: string
                example: [{"name":"general"},{"name":"varios"},{"name":"tp1"}]
                description: array that conteins names of channels of user in the organization
              msjPrivados:
                type: array
                items:
                  type: string
                example: [{"name":"CapitalMarvel"},{"name":"Iroman"},{"name":"Thor"}]
                description: array that conteins names of user which  email user has private messages in the organization
        400:
          description: invalid email
          schema:
            $ref: '#/definitions/Error' 
        401:
          description: invalid id organization
          schema:
            $ref: '#/definitions/Error'    
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error' 
                
  /idOrganizationValid/{organizationID}:
    get:
      description: Answer whether or not there is an organization with that identification
      parameters:
        - name: id
          in: path
          description: organizacion id
          required: true
          type: string
      responses:
        200:
          description: sucssusful request 
          schema:
            type: object
            properties:   
              message:
                type: string
        400:
          description: Invalid Request
          schema:
            type: object
            properties:   
              message:
                type: string

  /organization:
    post:
      description: Create a new organization
      parameters: 
        - in: body
          name: data
          schema:
            type: object
            required: 
              - token
              - name
              - id
              - email
              - psw
            properties:
              token:
                type: string
                description: user token
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              nombre:
                type: string
                description: name organization
                example: "Organizacion de datos"
              id:
                type: string
                description: id organization
                example: "orga-2019"
              email:
                type: string
                description: owner organization
                example: "test@1.com"
              contrase√±a:
                type: string
                description: password organization
                example: "orga12345"
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:   
              message:
                type: string
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                example: Server error
                
  /userOrganization:
    post:
      description: Add a user to the organization
      parameters: 
        - in: body
          name: datos
          schema:
            type: object
            required: 
              - token
              - idOrganization
              - email
              - pswOrganization
            properties:
              token:
                type: string
                description: user token
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              idOrganizacion:
                type: string
                description: id organization
                example: "orga-2019"
              email:
                type: string
                description: email of the creator of the organization
                example: "test@1.com"
              pswOrganization:
                type: string
                description: password organization
                example: "it is the password"
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:   
              message:
                type: string
        400:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
        401:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string

  /organization/{token}/{organizationID}:
    get:
      description: returns information of organization with id "{organizationID}"
      parameters:
        - name: token
          in: path
          description: user token
          required: true
          type: string
        - name: organizationID
          in: path
          description: organization id
          required: true
          type: string
                
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:
                nombre:
                  type: string
                  example: "Taller 2 2019"
                  description: name organization
                id:
                  type: string
                  example: "taller2-19"
                  description: id organization
                owner_email:
                  type: string
                  example: "test@1.com"
                  description: user email that created the organization
                password:
                  type: string
                  example: "12345678"
                  description: password organization
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
                
  /nameOrganization:
    put:
      description: updates organization's name
      parameters: 
        - name: datos
          in: body
          schema:
            type: object
            required: 
              - token
              - organizationID
              - name
            properties:
              token:
                type: string
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
                description: user token
              id_organizacion:
                type: string
                example: "orga-2019"
                description: organization id
              nombre_organizacion:
                type: string
                example: "Taller 2 fiuba"
                description: new name organization
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:   
              message:
                type: string
        404:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
        500:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string

  /pswOrganization:
    put:
      description: updates organization's password
      parameters: 
        - name: datos
          in: body
          schema:
            type: object
            required: 
              - token
              - organizationID
              - psw
            properties:
              token:
                type: string
                description: user token
                example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9"
              id_organizacion:
                type: string
                description: id organization
                example: "orga-2019"
              psw_organizacion:
                type: string
                description: new password organization
                example: "fiuba2taller"
      responses:
        200:
          description: Successful request
          schema:
            type: object
            properties:   
              message:
                type: string
        400:
          description: Request Invalida!
          schema:
            type: object
            properties:   
              message:
                type: string
  
  /recoveredPassword:
    get:
      summary: returns a token with which the password can be recovered
      parameters:
      - in: body
        name: userEmail
        required: true
        schema:
          type: object
          required: 
            - email
          properties:
              email:
                type: string
                description: user's email
                example: "user@gmail.com"
        responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
            description: token to recover the password
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: user dose not exist
          schema:
            $ref: '#/definitions/Error'

    put:
      summary: updates user's password with the recovered token
      parameters:
      - in: body
        name: userData
        required: true
        schema:
          type: object
          required: 
            - email
            - recoverPasswordToken
            - newPassword
          properties:
              email:
                type: string
                description: user's email
                example: "user@gmail.com"
              recoverPasswordToken:
                type: string
                description: token to recover the password
                example: "fhsdjkfnsdjsS87s"
              newPassword:
                type: string
                description: new user's password
                example: "This is my new password"
        responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
            description: token to recover the password
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: user dose not exist
          schema:
            $ref: '#/definitions/Error'

  /organization/senderMenssage:
    get:
      summary: returns message without restrected organization words
      parameters:
        - in: body
          name: message
          required: true
          schema:
            type: object
            required: 
              - message
              - organizationID
              - userToken
            properties:
                message:
                  type: string
                  description: message that user sends 
                  example: "hello Carlos!"
          responses:
            200:
            description: Successful request
            name: messageOK
            schema:
              type: object
              description: message without restrected words
            500:
              description: Server faild
              schema:
                $ref: '#/definitions/Error'
            404:
              description: user or organization dose not exist
              schema:
                $ref: '#/definitions/Error'

  organization/restrictedWords/{id}/{token}:
    get:
      summary: returns organization's restricted words
      parameters:
        - in: path
          name: OrdanizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            type: object
            required: 
              - id
              - token
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
              description: organization dose not exist
              schema:
                $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: add a new restricted word to the organization
      parameters:
        - in: body
          name: restrictedWords
          required: true
          schema:
            type: object
            required:
              - restrictedWords
            properties:
                restrictedWords:
                  type: string
                  description: new restricted word
        - in: path
          name: organizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            type: object
            required: 
              - id
              - token
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user or organization dose not exist
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user is not authorized
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: delete an organization's restricted word
      parameters:
        - in: body
          name: restrictedWord
          required: true
          schema:
            type: object
            required:
              - restrictedWords
            properties:
                restrictedWords:
                  type: string
                  description: restricted word to delete
        - in: path
          name: organizationID and userToken
          description: organization's id and user's token
          required: true
          schema:
            properties:
              id:
                type: string
              token:
                type: string
            required: 
              - id
              - token
            type: object
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
            description: restricted words array
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user or organization dose not exist
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user is not authorized
          schema:
            $ref: '#/definitions/Error'

  /answerQuestions/{userEmail}/{asw1}/{asw2}:
    get:
      summary: returns recover password token if "asw1" and "asw2" are correct
      parameters:
        - in: path
          name: asw1, asw2, userEmail
          description: answers for secret questions of userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: recoverPasswordToken
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid user email
              schema:
                $ref: '#/definitions/Error'
        401:
          description: incorrect answers
          schema:
            $ref: '#/definitions/Error'

  /secretQuestions/{userEmail}:
    get:
      summary: returns userEmail's secret questions
      parameters:
        - in: path
          name: userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: question1, question2
          schema:
            type: object
            properties:
              question1:
                type: string
              question2:
                type: string
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid user email
              schema:
                $ref: '#/definitions/Error'

  /answersQuestions/{token}:
    get:
      summary: returns answers of secret questions
      parameters:
        - in: path
          name: token
          required: true
          description: token of user
      responses:
        200:
          description: Successful request
          name: answers
          schema:
            type: object
            properties:
              answers:
                type: object
                properties:
                  answer1:
                    type: string
                  answer2:
                    type: string
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /secretQuestios:
    put:
      summary: returns answers of secret questions
      parameters:
        - in: body
          name: token, question1, question2, answer1, answer2
          required: true
          description: token of user
          schema:
            type: object
            properties:
              token:
                type: string
              question1:
                type: string
              question2:
                type: string
              answer1:
                type: string
              answer2:
                type: string
            required:
              - token
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /location/{token}/{email}:
    get:
      summary: returns to token's user longitude and latitude of email's user
      parameters:
        - in: path
          name: token, email
          required: true
          description: token of user
      responses:
        200:
          description: Successful request
          name: latitud, longitud
          schema:
            type: object
            properties:
              latitud:
                type: Number
              longitud:
                type: Number
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /location:
    put:
      summary: updates user location (longitude and/or latitude)
      parameters:
        - in: body
          name: token, lotitud, longitud
          properties:
            token:
              type: string
            longitud:
              type: Number
            latitud:
              type: Number
          required: true
          description: longitude and latitude of token's user
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /registration/months/{token}:
    get:
      summary: returns the number of users who registered in the last four months
      parameters:
        - in: path
          name: token
          properties:
            token:
              type: string
          required: true
      responses:
        200:
          description: Successful request
          name: resultados
          schema:
            type: array
            items:
              type: object
              properties:
                year:
                  type: number
                month:
                  type: number
                total:
                  type: number
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /registration/year/{token}/{year}:
    get:
      summary: returns the number of users who registered on year "{year}"
      parameters:
        - in: path
          name: token, year
          properties:
            token:
              type: string
            year:
              type: number
          required: true
      responses:
        200:
          description: Successful request
          name: total
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /logout/{token}:
    get:
      summary: updates user token_notifications to ' '
      parameters:
        - in: path
          name: token, year
          properties:
            token:
              type: string
            year:
              type: number
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
              description: invalid token
              schema:
                $ref: '#/definitions/Error'

  /organization/user:
    post:
      summary: adds user to organization
      parameters:
        - in: body
          name: token, idOrganization, email, psw
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
              description: invalid organization
              schema:
                $ref: '#/definitions/Error'
        401:
              description: user is organization's member
              schema:
                $ref: '#/definitions/Error'

  /organization/name:
    put:
      summary: updates organization name
      parameters:
        - in: body
          name: token, organizationID, name
          required: true
      responses:
        200:
          description: Successful request
          name: organization
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'

  /organization/password:
    put:
      summary: updates organization password
      parameters:
        - in: body
          name: token, organizationID, psw
          required: true
      responses:
        200:
          description: Successful request
          name: organization
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'

  /moderator:
    put:
      summary: assignates a user as moderator
      parameters:
        - in: body
          name: token, organizationID, userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: user is moderator
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'

  /revokeModerator:
    put:
      summary: revokes a user as moderator
      parameters:
        - in: body
          name: token, organizationID, userEmail
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: user is not moderator
          schema:
            $ref: '#/definitions/Error'

  /member/{token}/{id}/{email}:
    delete:
      summary: revokes a user as moderator
      parameters:
        - in: body
          name: token, OrganizationID, email
          parameters:
            token:
              type: string
              description: user who delete user of organization
            id:
              type: string
              description: organization idOrganization
            email:
              type: string
              description: email of user who is delete
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: user's email is owner
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'

  /welcomeOrganization:
    put:
      summary: updates welcome message of organization
      parameters:
        - in: body
          name: token, organizationID, welcome
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        400:
          description: welcome message can not be null
          schema:
            $ref: '#/definitions/Error'

  /photoOrganization:
    put:
      summary: updates photo of organization
      parameters:
        - in: body
          name: token, organizationID, photo
          required: true
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        400:
          description: photo can not be null
          schema:
            $ref: '#/definitions/Error'

  /locations/{token}/{id}:
    get:
      summary: returns locations of organization's members
      parameters:
        - in: body
          name: token, organizationID, photo
          required: true
      responses:
        200:
          description: Successful request
          name: users
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  type: object
                  parameters:
                    nickname:
                      type: string
                    email:
                      type: string
                    longitud:
                      type: number
                    latitud: 
                      type: number

        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization or user token
          schema:
            $ref: '#/definitions/Error'

  /moderator/{token}/{id}/{email}:
    get:
      summary: returns status 200 if user email is owner or moderator
      parameters:
        - in: path
          name: token, id, email
          required: true
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        400:
          description: user is not moderator and user is not owner
          schema:
            $ref: '#/definitions/Error'

  /organization/restrictedWords/{id}/{token}:
    get:
      summary: returns restricted words of organization
      parameters:
        - in: path
          name: token, id
          parameters:
            token:
              type: string
              description: user token
            id:
              type: string
              description: id organization
          required: true
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid user token or organization
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: adds a restricted word of organization
      parameters:
        - in: path
          name: token, id
          parameters:
            token:
              type: string
              description: user token
            id:
              type: string
              description: id organization
          required: true
        - in: body
          name: restrictedWords
          description: restricted word to add
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid user token or organization
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user has not permission
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: deletes a restricted word of organization
      parameters:
        - in: path
          name: token, id
          parameters:
            token:
              type: string
              description: user token
            id:
              type: string
              description: id organization
          required: true
        - in: body
          name: restrictedWords
          description: restricted word to delete
      responses:
        200:
          description: Successful request
          name: restrictedWords
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid user token or organization
          schema:
            $ref: '#/definitions/Error'
        406:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'
        401:
          description: user has not permission
          schema:
            $ref: '#/definitions/Error'

  /message:
    post:
      summary: returns message without restricted words
      parameters:
        - in: body
          name: userToken, message, organizationID, channelName
          required: true
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /mention:
    post:
      summary: returns array with users's emails that were mentioned
      parameters:
        - in: body
          name: token, message
          required: true
      responses:
        200:
          description: Successful request
          name: mentions
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /messages/{token}:
    get:
      summary: returns array with users's emails that were mentioned
      parameters:
        - in: body
          name: token, message
          required: true
      responses:
        200:
          description: Successful request
          name: totalInfo
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                total:
                  type: number
                canales:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      total:
                        type: number
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /allOrg:
    get:
      summary: returns array with all organizations
      responses:
        200:
          description: Successful request
          name: organizations
          schema:
            type: array
            items:
              type: object
              description: organization
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'









  /channel:
    post:
      summary: create new channel
      parameters:
        - in: body
          name: channel
          schema:
            $ref: '#/definitions/Channel'
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        405:
          description: name of channel alredy exist
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'

  /channelValid/{id}/{name}:
    get:
      summary: create new channel
      parameters:
        - in: path
          name: id, name
          schema:
            type: object
            properties:
              id:
                type: string
                description: organization id
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: name of channel alredy exist
          schema:
            $ref: '#/definitions/Error'
        403:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'

  /channel/users:
    post:
      summary: add user to channel
      parameters:
        - in: body
          name: token, id, name, mo_email, emails
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              emails:
                type: array
                description: items are users
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: name of channel alredy exist
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
    
  /channel/user:
    post:
      summary: add user to channel
      parameters:
        - in: body
          name: token, id, name, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              email:
                type: string
                description: user to add
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: name of channel alredy exist
          schema:
            $ref: '#/definitions/Error'
        403:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'

  /channel/user/{token}/{id}/{name}/{email}:
    delete:
      summary: delete user from channel
      parameters:
        - in: path
          name: token, id, name, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              email:
                type: string
                description: user to add
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: email does not exist
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        403:
          description: user is not organization's member
          schema:
            $ref: '#/definitions/Error'
        402:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /privateChannel:
    put:
      summary: set message privation
      parameters:
        - in: body
          name: token, organizationID, name, private
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              organizationID:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              private:
                type: boolean
                description: true if channel is private, false if channel is public
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /privateChannel/{token}/{id}/{name}:
    get:
      summary: updates channel privation
      parameters:
        - in: path
          name: token, id, name
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /description:
    put:
      summary: updates description of channel
      parameters:
        - in: body
          name: token, organizationID, name, description
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              organizationID:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              description:
                type: string
                description: description of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /description/{token}/{id}/{name}:
    get:
      summary: returns desfription of channel "{name}" from organization with id "{id}"
      parameters:
        - in: path
          name: token, id, name
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              organizationID:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /welcomeChannel:
    put:
      summary: updates welcome message of channel
      parameters:
        - in: body
          name: token, organizationID, name, welcome
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              organizationID:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              welcome:
                type: string
                description: welcome message of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /welcomeChannel/{token}/{id}/{name}:
    get:
      summary: returns welcome message of channel "{name}" from organization with id "{id}"
      parameters:
        - in: path
          name: token, id, name
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /channel/{token}/{id}/{name}:
    delete:
      summary: returns welcome message of channel "{name}" from organization with id "{id}"
      parameters:
        - in: path
          name: token, id, name
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: invalid channel
          schema:
            $ref: '#/definitions/Error'

  /channels/user:
    post:
      summary: returns channels that user is member on organization
      parameters:
        - in: body
          name: token, id, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: channel
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user
          schema:
            $ref: '#/definitions/Error'

  /channelsAvailable/user:
    post:
      summary: returns channels that user is member on organization
      parameters:
        - in: body
          name: token, id, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
      responses:
        200:
          description: Successful request
          name: channel
          schema:
            type: array
            items:
              type: string
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid organization
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user
          schema:
            $ref: '#/definitions/Error'
        405:
          description: user is not member
          schema:
            $ref: '#/definitions/Error'

  /channel/mention:
    post:
      summary: returns push notification to user mentioned
      parameters:
        - in: body
          name: token, id, channel, message
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              message:
                type: string
                description: message to send
      responses:
        200:
          description: Successful request
          name: message
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /allChannel:
    get:
      summary: returns array with all channels
      responses:
        200:
          description: Successful request
          name: channels
          schema:
            type: array
            items:
              type: object
              description: channel
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'

  /tito:
    post:
      summary: check if tito was mentioned and tell him the message
      parameters:
        - in: body
          name: token, id, channel, message
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
              name:
                type: string
                description: name of channel
              message:
                type: string
                description: message to send
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'











  /privateChats/{token}/{id}:
    get:
      summary: returns user's private message in specific organization
      parameters:
        - in: path
          name: token, id
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              id:
                type: string
                description: id organization
      responses:
        200:
          description: Successful request
          name: msjs
          schema:
            type: object
            parameters:
              msjs:
                type: array
                items:
                  type: email
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /privateChats/{token}:
    get:
      summary: returns user's private message in no organization
      parameters:
        - in: path
          name: token, id
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
      responses:
        200:
          description: Successful request
          name: msjs
          schema:
            type: object
            parameters:
              msjs:
                type: array
                items:
                  type: email
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'

  /privateChat/{token}/{email}/{id}:
    get:
      summary: returns information of private chat between user token and user email in organization
      parameters:
        - in: path
          name: token, email, id
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              email:
                type: email
                description: email contact
              id:
                type: string
                description: organization id
      responses:
        200:
          description: Successful request
          name: private_msj
          schema:
            type: object
            parameters:
              private_msj:
                type: object
                parameters:
                  _id:
                    type: string
                    description: private message id
                  name:
                    type: email
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user email is not member of organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: there is not private chat between users
          schema:
            $ref: '#/definitions/Error'

  /privateChat/{token}/{email}:
    get:
      summary: returns information of private chat between user token and user email in NO organization
      parameters:
        - in: path
          name: token, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              email:
                type: email
                description: email contact
      responses:
        200:
          description: Successful request
          name: private_msj
          schema:
            type: object
            parameters:
              private_msj:
                type: object
                parameters:
                  _id:
                    type: string
                    description: private message id
                  name:
                    type: email
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'
        404:
          description: user email is not member of organization
          schema:
            $ref: '#/definitions/Error'
        405:
          description: there is not private chat between users
          schema:
            $ref: '#/definitions/Error'

  /privateChat:
    post:
      summary: creates a private chat
      parameters:
        - in: body
          name: token, id, email
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              email:
                type: email
                description: email contact
              id:
                type: string
                description: id organization
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token
          schema:
            $ref: '#/definitions/Error'
        404:
          description: invalid user email
          schema:
            $ref: '#/definitions/Error'
        405:
          description: already exist a private chat
          schema:
            $ref: '#/definitions/Error'
        406:
          description: invalid organization id
          schema:
            $ref: '#/definitions/Error'

  /privateChat/mention:
    post:
      summary: sends push notification to user mentioned
      parameters:
        - in: body
          name: token, id, email, message
          schema:
            type: object
            properties:
              token:
                type: string
                description: user token
              email:
                type: email
                description: email contact
              id:
                type: string
                description: id organization
              message:
                type: string
                description: message to send
      responses:
        200:
          description: Successful request
          name: message
          schema:
            type: object
        500:
          description: Server faild
          schema:
            $ref: '#/definitions/Error'
        400:
          description: invalid user token or user email
          schema:
            $ref: '#/definitions/Error'
        404:
          description: send notification error
          schema:
            $ref: '#/definitions/Error'







definitions:
  user:
    type: object
    properties:
      token:
        type: string
        description: user login token
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url potho
  signUpCredentials:
    type: object
    required:
    - psw
    - email
    properties:
      psw:
        type: string
        description: user password
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url photo
  logInCredentials:
    type: object
    required:
    - email
    - psw
    properties:
      email:
        type: string
        description: user email
      psw:
        type: string
        description: user password
  facebookLogInCredentials:
    type: object
    required:
    - token
    properties:
      token:
        type: string
        example: aB12874gk12sh37901nnlid2
        description: user token asigned by facebook api
  userProfile:
    type: object
    properties:
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url photo
  Channel:
    type: object
    properties:
      name :
        type: string
        description: channel name
      id:
        type: string
        description: id organization where channel was created
      desc:
        type: string
        description: description
      owner:
        type: string
      welcome:
        type: string
        description: welcome message
  Error:
    properties:
      code:
        type: int32
        example: 500
      message:
        type: string
        example: server error

