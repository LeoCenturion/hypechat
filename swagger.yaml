---
swagger: "2.0"
info:
  description: API para la app Hypechat de la materia 75.52 Taller de Programacion 2 de la FIUBA
  version: 1.0.0
  title: Hypechat API
host: https://secure-plateau-18239.herokuapp.com/
schemes:
- https
paths:
  /login:
    post:
      summary: Valida al usuario que quiere ingresar a la app
      parameters:
      - in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/loginCredentials'
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            $ref: '#/definitions/user'
        404:
          description: Bad login information
          schema:
            $ref: '$/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'

  /signUp:
    post:
      summary: Receives user information through the body and registers it as a new user if it doesn't already exists.
      parameters:
      - in: body
        name: userSignUpData
        required: true
        schema:
          $ref: '#/definitions/signUpCredentials'
      responses:
        200:
          description: Succesful request
          schema:
            $ref: '#/definitions/user'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /loginFacebook:
    post:
      summary: sends user's facebook token for login.
      parameters:
      - in: body
        name: facebookToken
        required: true
        schema:
          $ref: '#/definitions/facebookLoginCredentials'
      responses:
        200:
          description: Se realizo la request con exito!
          schema:
            $ref: '#/definitions/user'
        400:
          description: Bad login information
          schema:
            $ref: '$/definitions/Error'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /profile/{userEmail}:
    get:
      summary: Se muestran los datos (sin pws y token) del usuario al cual le corresponde el email del path (poner el mail sin las llaves en los costados).
      parameters:
      - name: email
        in: path
        description: email del usuario del cual se quiere ver el perfil
        required: true
        type: string
      responses:
        200:
          description: Request Exitoso!
          schema:
            $ref: '#/definitions/user'
        400:
          description: email del path no existe.
          schema:
            $ref: '#/definitions/Error' 
        500:
          description: Fallo el servidor
          $ref: '#/definitions/Error' 

  /profile:
    put:
      summary: updates information fields (with exception of the token), of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: user
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user profile successfully updated
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error'

  /psw:
    put:
      summary: updates password of the user identified by the token, provided in the body.
      parameters:
      - in: body
        name: user
        required: false
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: Successful request
          schema:
            type: string
            description: user password successfully updated
        500:
          description: Fallo el servidor
          schema:
            $ref: '#/definitions/Error' 

definitions:
  user:
    type: object
    properties:
      token:
        type: string
        description: user login token
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url de la nueva foto del usuario
  signUpCredentials:
    type: object
    required:
    - psw
    - email
    properties:
      psw:
        type: string
        description: user password
      name:
        type: string
        description: user name
      nickname:
        type: string
        description: user nickname
      email:
        type: string
        description: 
      photo:
        type: string
        description: url de la nueva foto del usuario
  logInCredentials:
    type: object
    required:
    - email
    - psw
    properties:
      email:
        type: string
        description: user email
      psw:
        type: string
        description: user password
  facebookLogInCredentials:
    type: object
    required:
    - token
    properties:
      token:
        type: string
        example: aB12874gk12sh37901nnlid2
        description: user token asigned by facebook api
  Error:
    properties:
      code:
        type: int32
        example: 400
      message:
        type: string
        example: server error
